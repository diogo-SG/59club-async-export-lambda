AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Lambda function for 59Club PDF report generation with API Gateway'

Parameters:
  FunctionName:
    Type: String
    Default: 59club-async-export-lambda
    Description: Name for the Lambda function
  
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Deployment environment
  
  LogLevel:
    Type: String
    Default: info
    AllowedValues: [debug, info, warn, error]
    Description: Logging level for the function
  
  MaxRetries:
    Type: Number
    Default: 3
    Description: Maximum retry attempts for operations
  
  AllowedDomains:
    Type: CommaDelimitedList
    Default: "59club.com,app.59club.com,api.59club.com"
    Description: Comma-separated list of allowed domains

  DeploymentMethod:
    Type: String
    Default: zip
    AllowedValues: [zip, inline]
    Description: Deployment method - zip for production, inline for initial setup

  S3Bucket:
    Type: String
    Default: ""
    Description: S3 bucket containing the deployment ZIP file (required if DeploymentMethod is zip)

  S3Key:
    Type: String
    Default: "function.zip"
    Description: S3 key for the deployment ZIP file

Conditions:
  UseZipDeployment: !Equals [!Ref DeploymentMethod, zip]
  UseInlineDeployment: !Equals [!Ref DeploymentMethod, inline]

Resources:
  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${FunctionName}-execution-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${FunctionName}*"
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${FunctionName}-dlq"

  # Lambda Function
  PDFExportLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionName
      Runtime: nodejs18.x
      Handler: src/index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code: !If
        - UseZipDeployment
        - S3Bucket: !Ref S3Bucket
          S3Key: !Ref S3Key
        - ZipFile: |
            exports.handler = async (event) => {
              return {
                statusCode: 200,
                body: JSON.stringify({ 
                  message: 'Placeholder - Deploy actual code with ZIP upload',
                  note: 'Update function code using: aws lambda update-function-code --function-name [name] --zip-file fileb://function.zip'
                })
              };
            };
      MemorySize: 2048
      Timeout: 180
      EphemeralStorage:
        Size: 1024
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          LOG_LEVEL: !Ref LogLevel
          MAX_RETRIES: !Ref MaxRetries
          ALLOWED_DOMAINS: !Join [',', !Ref AllowedDomains]
          TIMEOUT_MS: '150000'
          UPLOAD_TIMEOUT_MS: '60000'
          EMAIL_TIMEOUT_MS: '30000'
          MAX_FILE_SIZE_MB: '50'
      DeadLetterConfig:
        TargetArn: !GetAtt DeadLetterQueue.Arn

  # Dead Letter Queue for failed executions
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${FunctionName}-dlq"
      MessageRetentionPeriod: 1209600  # 14 days

  # Lambda Log Group
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${FunctionName}"
      RetentionInDays: 14

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${FunctionName}-api"
      Description: API Gateway for PDF export Lambda function
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: export

  # API Gateway Method (POST)
  ApiMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PDFExportLambda.Arn}/invocations"

  # API Gateway Method (OPTIONS for CORS)
  ApiMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiMethodPost
      - ApiMethodOptions
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

  # Lambda Permission for API Gateway
  ApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PDFExportLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"

  # CloudWatch Alarm for Lambda Errors
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${FunctionName}-errors"
      AlarmDescription: "Lambda function error rate"
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PDFExportLambda

  # CloudWatch Alarm for Lambda Duration
  LambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${FunctionName}-duration"
      AlarmDescription: "Lambda function duration"
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 120000  # 2 minutes
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PDFExportLambda

Outputs:
  LambdaFunctionArn:
    Description: "ARN of the Lambda function"
    Value: !GetAtt PDFExportLambda.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaArn"

  ApiGatewayUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/export"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"

  DeadLetterQueueUrl:
    Description: "Dead letter queue URL"
    Value: !Ref DeadLetterQueue
    Export:
      Name: !Sub "${AWS::StackName}-DLQUrl"
